* Additional functions written in elisp
  Loading additional functions that don't depend on external packages.
  #+BEGIN_SRC emacs-lisp
    (load (expand-file-name "elisp/additional-functions.el"
			    user-emacs-directory) t)
  #+END_SRC


General packages


** Auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default)
    (global-auto-complete-mode t))
#+END_SRC


** Color-theme-modern
Packages with many Emacs' themes
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-modern
    :ensure t
    ;; :config (load-theme 'wombat t)
    )
#+END_SRC



** Expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** Hungry-delete
C-d now remove all whitespace from point to the first non whitespace
character. At least I understand it like that.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC

** Iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC

** Lorem-ipsum
Package to putting into buffer psudolatin (?) text convenient in
testing of formatting.
#+BEGIN_SRC emacs-lisp
  ;; (use-package lorem-ipsum
  ;;   :ensure t
  ;;   :config (lorem-ipsum-use-default-bindings)
  ;;   )
#+END_SRC

** Multiple-cursors
Million more things that I don't know.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

** Nimbus theme
To not forget this very promising theme.
#+BEGIN_SRC emacs-lisp
  (use-package nimbus-theme
    :ensure t)
#+END_SRC

** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'BibTeX-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Swiper
-- how to describe it????
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-c j" . 'counsel-git-grep)
    ("C-c k" . 'counsel-ag)
    ("C-x l" . 'counsel-locate)
    ("C-S-o" . 'counsel-rhythmbox)
           ;; Alternative keychords
           ;; ("<f4>" . 'ivy-resume)
           ;; ("<f2> f" . 'counsel-describe-function)
           ;; ("<f2> v" . 'counsel-describe-variable)
           ;; ("<f2> l" . 'counsel-find-library)
           ;; ("<f2> i" . 'counsel-info-lookup-symbol)
           ;; ("<f3> u" . 'counsel-unicode-char)
           )
    ;; :config
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    )
#+END_SRC

** Try
-- try package without installing it
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC


** Which-key
-- how to describe it????
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC


* Configuration of LaTeX in Emacs

** Reftex
,,Folding and unfolding parts of the text might be confusing, though,
but thereâ€™s another way to navigate through a big TeX file, and you can
use Reftex mode for it. Reftex is a mode that helps with managing
references (full documentation), but it can also be used to create
a table of contents for a TeX file and to navigate using it. Here is my
configuration for Reftex from my .emacs file:''
https://piotr.is/2010/emacs-as-the-ultimate-latex-editor/
#+BEGIN_SRC emacs-lisp
  (autoload 'reftex-mode "reftex" "RefTeX Minor Mode" t)
  (autoload 'turn-on-reftex "reftex" "RefTeX Minor Mode" nil)
  (autoload 'reftex-citation "reftex-cite" "Mace citation" nil)
  (autoload 'reftex-index-phrase-mode "reftex-index" "Pharse Mode" t)

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (add-hook 'reftex-load-hook 'imenu-add-menubar-index)
  ;; Maybe this should be commented out

  (setq reftex-plug-into-AUCTeX t)        ; I don't know what this do????

  (setq LaTeX-eqnarray-label "eq"
        LaTeX-equation-label "eq"
        LaTeX-figure-label "fig"
        LaTeX-table-label "tab"
        LaTeX-myChapter-label "chap"
        TeX-auto-save t
        TeX-newline-function 'reindent-then-newline-and-indent
        TeX-parse-self t
        TeX-style-path '("style/" "auto/"
                         "/usr/share/emacs25/site-lisp/auctex/style/"
                         "/var/lib/auctex/emacs25"
                         "/usr/local/share/emacs25/site-lisp/auctex/style/")
        LaTeX-section-hook '(LaTeX-section-heading
                             LaTeX-section-title
                             LaTeX-section-toc
                             LaTeX-section-section
                             LaTeX-section-label))
#+END_SRC

** Packages for LaTeX
*** LaTeX-pretty-symbols
-- display unicode in place of LaTeX commands
#+BEGIN_SRC emacs-lisp
  (use-package latex-pretty-symbols
    :ensure t
    :config (global-prettify-symbols-mode t))
  ;; Czy global-prettify-symbols-mode pochodzi z paczki latex-pretty-symbols?
#+END_SRC









* Configuration of IDEs inside Emacs and appropriate packages

** For many languages
*** Aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config (global-aggressive-indent-mode 1))
#+END_SRC

** `Python'
*** Setting Python interpreter to Python3
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  ;; (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  ;; (setq python-shell-interpreter "ipython3"
  ;;       python-shell-interpreter-args "-i")
#+END_SRC

** `Rust-mode' -- Emacs mode for Rust programming language
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    ;; :config (setq rust-format-on-save t)
    )
#+END_SRC




* Advanced build-up features

** Keyboard's macros
*** Keybord's macros for core things.
Make better title
#+BEGIN_SRC emacs-lisp
  (fset 'error-line
     [tab ?& ?  ?& ?  ?& ?  ?& ?  ?\\ ?\\ ?\M-m])
#+END_SRC

*** Keybord's macros for temporary things.
These macros will be removed, when things will be done.
#+BEGIN_SRC emacs-lisp
  ;; (fmakunbound 'name-of-macro)
  ;; (fmakunbound 'HereIs)

  ;; For correcting word of dr Rao

  (fset 'HereIs-1
        "Here is \"\C-f, should be \"\C-f.\342\342\342\C-f\C-f\C-f\C-f")

  (put 'HereIs-1 'kmacro t)

  (fset 'HereIs-many
        "Here is \"\C-f, should be \"\C-f. ")

  (put 'HereIs-many 'kmacro t)

  ;; Macro for inserting line with title.
  (fset 'Title
        "Title: .\C-b\"")

  (put 'Title 'kmacro t)

  (fset 'Titles
        "Titles: \"\C-f.\C-b\C-b\C-b, \C-b\C-b\"")

  (put 'Titles 'kmacro t)

  (fset 'Strange-text
        "Strange text: .\C-b\"")

  (put 'Strange-text 'kmacro t)

  (fset 'Strange-text-many
        [?S ?t ?r ?a ?n ?g ?e ?- ?t ?e ?x ?t ?: ?  ?\" ?\C-e ?. return])

  (put 'Strange-text-many 'kmacro t)

  (fset 'Tenth-paragraphs
        " paragraph.\C-a")

  (put 'Tenth-paragraphs 'kmacro t)

  (fset 'th-paragraph
        "th paragraph.\C-a")

  (put 'th-paragraph 'kmacro t)

#+END_SRC

*** Keyboards macros for marking place in the text
#+BEGIN_SRC emacs-lisp
  ;; ###########################
  ;; Emacs Lisp
  ;; ###########################

  (fset 'elisp-30
        [?\; ?\; ?  ?\C-2 ?\C-7 ?# ?\C-n])

  (fset 'elisp-13
        [?\; ?\; ?  ?\C-1 ?\C-0 ?# ?\C-n])

  (fset 'elisp-section
        [?\; ?\; ?  ?\C-2 ?7 ?# ?\C-n ?\; ?\; ?  ?\C-n ?\; ?\; ?  ?\C-n ?\; ?\; ?  ?\C-2 ?7 ?# ?\C-p ?\C-p])



  ;; ###########################
  ;; Python
  ;; ###########################


  (fset 'python-30
        [?\C-3 ?\C-0 ?# ?\C-n])

  (fset 'python-section
        [?\C-3 ?\C-0 ?# ?\C-n ?# ?  ?\C-n ?\C-3 ?\C-0 ?# ?\C-p])
#+END_SRC
