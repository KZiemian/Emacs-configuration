#+TITLE: General packages
In this file we configure packages that should be avaliable in all or many
Emacs buffer and major mode. They are listed in alphabetical order.

* Ace-window
Provide a way to fast switch between numbered windows.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
  '(aw-leading-char-face
    ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC



* Achievements ;-)

#+BEGIN_SRC emacs-lisp
(use-package achievements
  :ensure t
  :config (achievements-mode t))
#+END_SRC



* Avy
Provide a way to quickly move inside windows and frames. In **Customize**
set `avy-style' to `Pre' or other style that you prefer.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g g" . avy-goto-line)
         ("M-g M-g" . avy-goto-line)
         ("M-g e" . avy-goto-word-0)
         ("M-g w" . avy-goto-word-1)))
#+END_SRC



* Beacon
When you move point, the wave appears showing where it is.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config (beacon-mode t))
#+END_SRC


* Counsel
This package is need for current configuration of Swiper to work. I don't
know anything more about it.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
 (("M-y" . counsel-yank-pop)
  :map ivy-minibuffer-map
  ("M-y" . ivy-next-line)))
#+END_SRC


* Ivy
From what I understand, my current configuration of Swiper need this
package to work. I don't know anything more about it.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))
#+END_SRC


* Swiper
Provide great searching engine in all variety of Emacs windows.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
             ("C-r" . swiper)
             ("C-c C-r" . ivy-resume)
             ("M-x" . counsel-M-x)
             ("C-x C-f" . 'counsel-find-file)
             ("C-h f" . 'consuel-describe-function)
             ("C-h v" . 'counsel-describe-variable)
             ("C-h l" . 'counsel-find-library)
             ("C-h i" . 'counsel-info-lookup-symbol)
             ("C-c u" . 'counsel-unicode-char)
             ("C-c g" . 'counsel-git))
      )
#+END_SRC



* Undo-tree
Repleace build-in Emacs undo-redo mechanism with undo tree (tree structure
of undo-redo mechanism).

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config (global-undo-tree-mode t))
#+END_SRC
